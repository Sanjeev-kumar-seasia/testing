name: Deploy to ECS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 3: Log in to Amazon ECR
      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
          docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY }}

      # Step 4: Build and Push Docker Image
      - name: Build and Push Docker Image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t ${{ secrets.ECR_REPOSITORY }}:${IMAGE_TAG} .
          docker tag ${{ secrets.ECR_REPOSITORY }}:${IMAGE_TAG} ${{ secrets.ECR_REPOSITORY }}:latest
          docker push ${{ secrets.ECR_REPOSITORY }}:${IMAGE_TAG}
          docker push ${{ secrets.ECR_REPOSITORY }}:latest
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV

      # Step 5: Dynamically Create the Task Definition
      - name: Create ECS Task Definition
        run: |
          cat <<EOF > taskdefinition.json
          {
            "family": "${{ secrets.ECS_TASK_FAMILY }}",
            "executionRoleArn": "${{ secrets.ECS_EXECUTION_ROLE_ARN }}",
            "networkMode": "awsvpc",
            "containerDefinitions": [
              {
                "name": "${{ secrets.ECS_CONTAINER_NAME }}",
                "image": "${{ secrets.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}",
                "memory": ${{ secrets.ECS_MEMORY }},
                "cpu": ${{ secrets.ECS_CPU }},
                "essential": true,
                "portMappings": [
                  {
                    "containerPort": 80,
                    "protocol": "tcp"
                  }
                ],
                "environment": [
                  {
                    "name": "MY_STATIC_VAR",
                    "value": "some-static-value"
                  }
                ],
                "secrets": [
                  {
                    "name": "DATABASE",
                    "valueFrom": "arn:aws:secretsmanager:${{ secrets.AWS_REGION }}:311141532026:secret:github_actions-kspcoO"
                  }
                ]
              }
            ],
            "requiresCompatibilities": [
              "FARGATE"
            ],
            "cpu": "${{ secrets.ECS_CPU }}",
            "memory": "${{ secrets.ECS_MEMORY }}"
          }
          EOF

      # Step 6: Register the Task Definition
      - name: Register Task Definition
        id: register-task-def
        run: |
          TASK_DEFINITION_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://taskdefinition.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          echo "TASK_DEFINITION_ARN=${TASK_DEFINITION_ARN}" >> $GITHUB_ENV

      # Step 7: Update the ECS Service
      - name: Update ECS Service
        run: |
          aws ecs update-service \
            --cluster ${{ secrets.ECS_CLUSTER }} \
            --service ${{ secrets.ECS_SERVICE }} \
            --task-definition ${{ env.TASK_DEFINITION_ARN }} \
            --region ${{ secrets.AWS_REGION }}
